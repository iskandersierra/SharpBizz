// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SharpBizz.Http.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("HttpUtils_WriteResponseAsync")]
    [NUnit.Framework.CategoryAttribute("httpSerialization")]
    public partial class HttpUtils_WriteResponseAsyncFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HttpUtils_WriteResponseAsync.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "HttpUtils_WriteResponseAsync", "Create a binary serialized version of a given HttpResponseMessage", ProgrammingLanguage.CSharp, new string[] {
                        "httpSerialization"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Write a simple response message")]
        [NUnit.Framework.TestCaseAttribute("100", "Continue", null)]
        [NUnit.Framework.TestCaseAttribute("200", "OK", null)]
        [NUnit.Framework.TestCaseAttribute("201", "Created", null)]
        [NUnit.Framework.TestCaseAttribute("301", "Moved Permanently", null)]
        [NUnit.Framework.TestCaseAttribute("404", "Not Found", null)]
        [NUnit.Framework.TestCaseAttribute("500", "Internal Server Error", null)]
        public virtual void WriteASimpleResponseMessage(string status, string reason, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Write a simple response message", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given(string.Format("A simple HTTP response is created with {0}, \"{1}\" and HTTP version 1 and 1", status, reason), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("The response message is written to a stream", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then("The stream is not empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 9
 testRunner.And(string.Format("The string representation of the stream is a simple response message with {0}, \"{" +
                        "1}\" and HTTP version 1 and 1", status, reason), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Write a simple response message with different HTTP versions")]
        [NUnit.Framework.TestCaseAttribute("1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1", "7", null)]
        [NUnit.Framework.TestCaseAttribute("2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("0", "9", null)]
        public virtual void WriteASimpleResponseMessageWithDifferentHTTPVersions(string major, string minor, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Write a simple response message with different HTTP versions", exampleTags);
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given(string.Format("A simple HTTP response is created with 200, \"OK\" and HTTP version {0} and {1}", major, minor), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("The response message is written to a stream", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("The stream is not empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
 testRunner.And(string.Format("The string representation of the stream is a simple response message with 200, \"O" +
                        "K\" and HTTP version {0} and {1}", major, minor), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Write a simple response message with one content header and no content")]
        [NUnit.Framework.TestCaseAttribute("Content-Disposition", "attachment; filename=\"fname.ext\"", null)]
        [NUnit.Framework.TestCaseAttribute("Content-Location", "/index.htm", null)]
        [NUnit.Framework.TestCaseAttribute("Content-MD5", "Q2hlY2sgSW50ZWdyaXR5IQ==", null)]
        [NUnit.Framework.TestCaseAttribute("Content-Range", "bytes 21010-47021/47022", null)]
        [NUnit.Framework.TestCaseAttribute("Expires", "Thu, 01 Dec 1994 16:00:00 GMT", null)]
        [NUnit.Framework.TestCaseAttribute("Last-Modified", "Tue, 15 Nov 1994 12:45:26 GMT", null)]
        [NUnit.Framework.TestCaseAttribute("Allow", "GET, HEAD, OPTIONS", null)]
        [NUnit.Framework.TestCaseAttribute("Content-Encoding", "gzip, lzha", null)]
        [NUnit.Framework.TestCaseAttribute("Content-Language", "da, en-US, pt-PT, es-ES", null)]
        public virtual void WriteASimpleResponseMessageWithOneContentHeaderAndNoContent(string header, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Write a simple response message with one content header and no content", exampleTags);
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.Given(string.Format("A simple response is created with content \"{0}\" with value \"{1}\" and empty string" +
                        " content", header, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
 testRunner.When("The response message is written to a stream", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then("The stream is not empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.And(string.Format("The string representation of the stream is a simple response with \"{0}\" with valu" +
                        "e \"{1}\" and plain text content type", header, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Write a simple response message with one response header and no content")]
        [NUnit.Framework.TestCaseAttribute("Access-Control-Allow-Origin", "*", null)]
        [NUnit.Framework.TestCaseAttribute("Accept-Patch", "text/example;charset=utf-8", null)]
        [NUnit.Framework.TestCaseAttribute("Accept-Ranges", "bytes", null)]
        [NUnit.Framework.TestCaseAttribute("Age", "12", null)]
        [NUnit.Framework.TestCaseAttribute("Connection", "close", null)]
        [NUnit.Framework.TestCaseAttribute("Cache-Control", "max-age=3600", null)]
        [NUnit.Framework.TestCaseAttribute("Date", "Tue, 15 Nov 1994 08:12:31 GMT", null)]
        [NUnit.Framework.TestCaseAttribute("ETag", "\"737060cd8c284d8af7ad3082f209582d\"", null)]
        [NUnit.Framework.TestCaseAttribute("Link", "</feed>; rel=\"alternate\"", null)]
        [NUnit.Framework.TestCaseAttribute("Location", "http://www.w3.org/pub/WWW/People.html", null)]
        [NUnit.Framework.TestCaseAttribute("P3P", "CP=\"This is not a P3P policy! See http://www.google.com/support/accounts/bin/answ" +
            "er.py?hl=en&answer=151657 for more info.\"", null)]
        [NUnit.Framework.TestCaseAttribute("Pragma", "no-cache", null)]
        [NUnit.Framework.TestCaseAttribute("Proxy-Authenticate", "Basic", null)]
        [NUnit.Framework.TestCaseAttribute("Public-Key-Pins", "max-age=2592000; pin-sha256=\"E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=\";", null)]
        [NUnit.Framework.TestCaseAttribute("Refresh", "5; url=http://www.w3.org/pub/WWW/People.html", null)]
        [NUnit.Framework.TestCaseAttribute("Retry-After", "120", null)]
        [NUnit.Framework.TestCaseAttribute("Retry-After", "Fri, 07 Nov 2014 23:59:59 GMT", null)]
        [NUnit.Framework.TestCaseAttribute("Set-Cookie", "UserID=JohnDoe; Max-Age=3600; Version=1", null)]
        [NUnit.Framework.TestCaseAttribute("Strict-Transport-Security", "max-age=16070400; includeSubDomains", null)]
        [NUnit.Framework.TestCaseAttribute("Trailer", "Max-Forwards", null)]
        [NUnit.Framework.TestCaseAttribute("Transfer-Encoding", "gzip", null)]
        [NUnit.Framework.TestCaseAttribute("TE", "chunked, compress, deflate, gzip, identity", null)]
        [NUnit.Framework.TestCaseAttribute("Server", "Apache/2.4.1 (Unix)", null)]
        public virtual void WriteASimpleResponseMessageWithOneResponseHeaderAndNoContent(string header, string value, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Write a simple response message with one response header and no content", exampleTags);
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given(string.Format("A simple response is created with response \"{0}\" with value \"{1}\"", header, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.When("The response message is written to a stream", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("The stream is not empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
 testRunner.And(string.Format("The string representation of the stream is a simple response with \"{0}\" with valu" +
                        "e \"{1}\"", header, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
